// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyHealthMap.Data;

#nullable disable

namespace MyHealthMap.Data.Migrations
{
    [DbContext(typeof(MyHealthMapDbContext))]
    [Migration("20240521035258_DataBaseInitialize")]
    partial class DataBaseInitialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyHealthMap.Model.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Calories")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Menus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Calories = 435.0,
                            Description = "低脂且高蛋白的雞胸肉\r\n不論是想大口吃肉又想減少身體負擔的你\r\n或者想增肌減脂的你\r\n都會是個不錯的選擇唷",
                            Name = "舒肥雞胸餐盒",
                            Price = 105,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 2,
                            Calories = 558.0,
                            Description = "無骨雞腿丁\r\n加入洋蔥木耳紅蘿蔔及杏鮑菇一起拌炒\r\n\r\n逼出蔬菜的鮮甜及雞腿丁的香氣加入調醬融合\r\n口感紮實爽脆還能補充大量膳食纖維\r\n吃起來鹹甜鹹甜像紅燒的味道",
                            Name = "醬燒春雞餐盒",
                            Price = 115,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 3,
                            Calories = 525.0,
                            Description = "店家獨門熬煮薑汁與豬肉大火快炒",
                            Name = "薑汁燒肉豬",
                            Price = 129,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 4,
                            Calories = 576.0,
                            Description = "煮熟後的嫩雞腿，再用獨家照燒醬燉煮",
                            Name = "照燒嫩雞腿",
                            Price = 129,
                            RestaurantId = 2
                        });
                });

            modelBuilder.Entity("MyHealthMap.Model.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "830高雄市鳳山區五甲三路27號",
                            City = "高雄市",
                            Name = "勁請享用健康廚房-鳳山五甲店",
                            PhoneNumber = "078210715"
                        },
                        new
                        {
                            Id = 2,
                            Address = "830高雄市鳳山區忠誠路27號",
                            City = "高雄市",
                            Name = "懂吃健康餐廚-五甲店",
                            PhoneNumber = "0971708796"
                        });
                });

            modelBuilder.Entity("MyHealthMap.Model.Menu", b =>
                {
                    b.HasOne("MyHealthMap.Model.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("MyHealthMap.Model.Restaurant", b =>
                {
                    b.Navigation("Menus");
                });
#pragma warning restore 612, 618
        }
    }
}
